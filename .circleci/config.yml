version: 2

general:
  artifacts:
    - tests_html
    - tests_png

#checkout:
#  post:
#    - ./ci-support/checkout_merge_commit.sh
        
aliases:

  - &setup_miniconda
    name: setup_miniconda
    command: |
      echo "xxx setup_miniconda xxx"
      mkdir -p workspace
      git clone -b validateNightly git@github.com:CDAT/cdat workspace/cdat
      ls workspace/cdat
      # following will install miniconda3 under $WORKDIR/miniconda/bin
      python workspace/cdat/scripts/install_miniconda.py -w $WORKDIR -p $PYTHON_VERSION
      
  - &get_testdata
    name: get_testdata
    command: | 
      ls -l  workspace
      git clone git://github.com/cdat/uvcdat-testdata

  - &create_py2_conda_env
    name: create_py2_conda_env
    command: |
       export PATH=$WORKDIR/miniconda/bin:$PATH
       conda create -q -n py2 -c cdat/label/nightly -c conda-forge -c cdat cdms2 cdat_info udunits2 nose flake8 mesalib nose image-compare flake8 matplotlib image-compare genutil dv3d cdutil cdtime "proj4<5" "python<3" "numpy>1.14" 

  - &create_py3_conda_env
    name: create_py3_conda_env
    command: |
       export PATH=$WORKDIR/miniconda/bin:$PATH
       conda create -q -n py3 -c cdat/label/nightly -c conda-forge -c cdat cdms2 nose flake8 cdat_info udunits2 mesalib nose image-compare flake8 matplotlib image-compare genutil dv3d cdutil cdtime nbsphinx easydev "proj4<5" "python>3" "numpy>1.14" 

  - &setup_vcs
    name: setup_vcs
    command: |
       echo "Setting up vcs test for python version: $PYTHON_VERSION"
       export PATH=$WORKDIR/miniconda/bin:$PATH
       source activate $PYTHON_VERSION
       python setup.py install --old-and-unmanageable

  - &run_vcs_tests
    name: run_vcs_tests
    command: |
       echo "Running vcs test for python version: $PYTHON_VERSION"
       export PATH=$WORKDIR/miniconda/bin:$PATH
       export UVCDAT_ANONYMOUS_LOG=False
       export UVCDAT_SETUP_PATH=${HOME}
       source activate $PYTHON_VERSION
       python run_tests.py -v2 -n 2 -g --no-vtk-ui       
       ##RESULT=$?
       ##echo "py2 test command exit result:",$RESULT
       ##source activate py3
       ##python run_tests.py -n 2 -g --no-vtk-ui
       ##RESULT=$(( $RESULT + $? ))
       ##cd docs
       ##make doctest
       ##RESULT=$(( $RESULT + $? ))
       ##cd ..
       ##echo "py3 test command exit result:",$RESULT
       # REVISIT -- need to check results and upload

  - &prep_cache
    name: prep_cache
    command: |
       echo "preparing cache..."
       ln -s $WORKDIR/miniconda .

  - &use_restored_cache
    name: use_restored_cache
    command: | 
       echo "use restored cache..."
       mkdir $WORKDIR
       ln -s miniconda $WORKDIR/. 
jobs:

  macos_py2_miniconda:
    macos:
      xcode: "9.2.0"
    environment:
      WORKDIR: "workspace/test_macos_vcs"
      PYTHON_VERSION: 'py2'
    steps:
      - run: date '+%Y-%m-%d' > todaysDate.txt
      - run: *setup_miniconda
      - run: ls $WORKDIR/miniconda
      - run: *prep_cache
      - save_cache:
          key: py2_cache-v4-{{ checksum "todaysDate.txt" }}
          paths: miniconda

  macos_py2_vcs:
    macos:
      xcode: "9.2.0"
    environment:
      WORKDIR: "workspace/test_macos_vcs"
    steps:
      - run: date '+%Y-%m-%d' > todaysDate.txt
      - restore_cache:
          keys:
          key: py2_cache-v4-{{ checksum "todaysDate.txt" }}
      - run: *use_restored_cache
      - run: echo "xxx in macos_py2_vcs step xxxx"
      - run: pwd
      - run: ls -l $WORKDIR/miniconda

      #- run: *get_testdata
      #- run: *create_conda_env
      #- run: *setup_vcs
      #- run: *run_vcs_tests

  linux_vcs:
    machine:
      image: circleci/classic:latest
    environment:
      WORKDIR: "workspace/test_macos_vcs"
    steps:
      - run: uname -a
      - run: echo "xxx in macos_py2 step xxx"
      - run: pwd


workflows:
  version: 2
  nightly:
    jobs:
      - macos_py2_miniconda
      - macos_py2_vcs:
          requires:
            - macos_py2_miniconda
      #- linux_vcs
 
version: 2

aliases:

  - &get_testdata
    name: get_testdata
    command: |
      ls -l workspace
      git clone git://github.com/cdat/uvcdat-testdata

  - &create_conda_env
    name: create_conda_env
    environment:
       CHANNELS: "-c cdat/label/nightly -c conda-forge"
       PKGS: "cdms2 cdat_info udunits2 testsrunner mesalib matplotlib image-compare genutil dv3d cdutil cdtime nbformat 'proj4<5' numpy ghostscript vtk-cdat"
    command: |
      if [ -d ${HOME}/miniconda ]; then
        export PATH=$HOME/miniconda/bin:$PATH
        echo "Found miniconda directory"
      else
        echo "miniconda directory not found, installing conda"
        mkdir -p workspace
        git clone -b validateNightly --depth 1 git@github.com:CDAT/cdat workspace/cdat
        ls workspace/cdat
        python workspace/cdat/scripts/install_miniconda.py -w $HOME -p 'py3.7'
        export PATH=$HOME/miniconda/bin:$PATH
        conda config --set always_yes yes --set changeps1 no
        conda update -y -q conda
        conda config --set anaconda_upload no
        if [[ $PY_VER = "py2" ]]; then
          conda create -q -n cdat $CUSTOM_CHANNELS $CHANNELS $PKGS $TEMP_PKGS "python<3"
        else
          conda create -q -n cdat $CUSTOM_CHANNELS $CHANNELS $PKGS $TEMP_PKGS "python=3.7" sphinxcontrib-websupport nbsphinx easydev $COVERAGE_PKGS
        fi
      fi

  - &setup_vcs
    name: setup_vcs
    command: |
       export PATH=$HOME/miniconda/bin:$PATH
       source activate cdat
       python setup.py install

  - &run_vcs_tests
    name: run_vcs_tests
    command: |
       export PATH=$HOME/miniconda/bin:$PATH
       export CDAT_ANONYMOUS_LOG=False
       export CDAT_SETUP_PATH=${HOME}
       source activate cdat
       # possibly turn off coverage
       first=$(git cherry master -v | head -n1)
       current=$(git log -n1 --pretty=oneline)
       if [[ $first == $current || $current == *"do coverage"* || $CIRCLE_BRANCH == 'master'  ]]; then
         echo "Running with coverage"
         ACTUAL_COVERAGE=$COVERAGE
       else
         echo "Running w/o coverage"
         ACTUAL_COVERAGE=""
       fi
       python run_tests.py -H -v2 --timeout=100000 --checkout-baseline --no-vtk-ui $ACTUAL_COVERAGE
       RESULT=$?
       echo "**** $PY_VER test result: "${RESULT}
       if [[ $PY_VER = 'py3' ]]; then
          cd docs
          make doctest
          DOC_RESULT=$?
          echo "*** $PY_VER doc test result: "${DOC_RESULT}
          RESULT=$(( $RESULT + $DOC_RESULT ))
       fi
       exit $RESULT

  - &conda_upload
    name: conda_upload
    environment:
       CHANNELS: "-c cdat/label/nightly -c conda-forge"
    command: |
       if [[ $CIRCLE_BRANCH != 'master' ]]; then
          exit 0
       fi
       export PATH=${HOME}/miniconda/bin:$PATH
       conda install conda-build anaconda-client
       conda config --set anaconda_upload no
       export CONDA_BLD_PATH=`pwd`/conda_build
       git clone git://github.com/cdat/conda-recipes
       cd conda-recipes
       if [[ -d vcs ]]; then
          rm -rf vcs
       fi
       ln -s ../recipe vcs
       export PKG_NAME=vcs
       export USER=cdat
       export VERSION=8.1
       export LABEL=nightly
       python ./prep_for_build.py -l $VERSION
       conda build $PKG_NAME $CHANNELS
       anaconda -t $CONDA_UPLOAD_TOKEN upload -u $USER -l $LABEL $CONDA_BLD_PATH/noarch/$PKG_NAME-$VERSION.`date +%Y*`0.tar.bz2 --force

  - &run_coveralls
    name: run_coveralls
    command: |
       export PATH=$HOME/miniconda/bin:$PATH
       source activate $PY_VER
       # possibly turn off coverage
       first=$(git cherry master -v | head -n1)
       current=$(git log -n1 --pretty=oneline)
       if [[ $first == $current || $current != *"no_coverage"*  ]]; then
         coveralls
       else
         echo "Commit turned off coverage"
       fi
       source deactivate

jobs:
  macos_vcs_py2:
    macos:
      xcode: "10.2.0"
    resource_class: large
    environment:
      WORKDIR: "workspace/test_macos_vcs_py2"
      OS: "osx-64"
      PY_VER: "py2"
      TEMP_PKGS: "'ffmpeg>4' 'libpng>1.6.34'"
      CUSTOM_CHANNELS: ""
    steps:
      - checkout
      - restore_cache:
          keys:
            - macos_py2-2019-05-29
      - run: *get_testdata
      - run: *create_conda_env
      - save_cache:
          key: macos_py2-2019-05-29
          paths: /Users/distiller/miniconda
      - run: *setup_vcs
      - run: *run_vcs_tests
      - store_artifacts:
          path: tests_html
          destination: tests_html
      - store_artifacts:
          path: tests_png
          destination: tests_png

  macos_vcs_py3:
    macos:
      xcode: "10.2.0"
    environment:
      WORKDIR: "workspace/test_macos_vcs_py3"
      OS: "osx-64"
      PY_VER: "py3"
      TEMP_PKGS: "'ffmpeg>4' 'libpng>1.6.34'"
      CUSTOM_CHANNELS: ""
    steps:
      - checkout
      - restore_cache:
          keys:
            - macos_py3-2019-05-29
      - run: *get_testdata
      - run: *create_conda_env
      - save_cache:
          key: macos_py3-2019-05-29
          paths: /Users/distiller/miniconda
      - run: *setup_vcs
      - run: *run_vcs_tests
      - store_artifacts:
          path: tests_html
          destination: tests_html
      - store_artifacts:
          path: tests_png
          destination: tests_png

  linux_vcs_py2:
    docker:
      - image: circleci/python:latest
    resource_class: large
    environment:
      WORKDIR: "workspace/test_linux_vcs_py2"
      OS: "linux-64"
      PY_VER: "py2"
      CUSTOM_CHANNELS: ""
    steps:
      - checkout
      - restore_cache:
          keys:
            - linux_py2-2019-05-29
      - run: *get_testdata
      - run: *create_conda_env
      - save_cache:
          key: linux_py2-2019-05-29
          paths: /home/circleci/miniconda
      - run: *setup_vcs
      - run: *run_vcs_tests
      - store_artifacts:
          path: tests_html
          destination: tests_html
      - store_artifacts:
          path: tests_png
          destination: tests_png

  linux_vcs_py3:
    docker:
      - image: circleci/python:latest
    resource_class: large
    environment:
      WORKDIR: "workspace/test_linux_vcs_py3"
      OS: "linux-64"
      PY_VER: "py3"
      COVERAGE: "-c tests/coverage.json --coverage-from-egg"
      COVERAGE_PKGS: "coverage coveralls"
      CUSTOM_CHANNELS: ""
    steps:
      - checkout
      - restore_cache:
          keys:
            - linux_py3-2019-05-29
      - run: *get_testdata
      - run: *create_conda_env
      - save_cache:
          key: linux_py3-2019-05-29
          paths: /home/circleci/miniconda
      - run: *setup_vcs
      - run: *run_vcs_tests
      - run: *run_coveralls
      - run: *conda_upload
      - store_artifacts:
          path: tests_html
          destination: tests_html
      - store_artifacts:
          path: tests_png
          destination: tests_png

workflows:
  version: 2
  vcs:
    jobs:
      #- macos_vcs_py2
      - linux_vcs_py2
      - linux_vcs_py3
      - macos_vcs_py3:
          requires:
            - linux_vcs_py3

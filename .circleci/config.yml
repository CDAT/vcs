version: 2

checkout:
  post:
    - ./ci-support/checkout_merge_commit.sh
        
aliases:
  - &setup_miniconda
    name: setup_miniconda
    command: |
      mkdir -p workspace
      git clone -b validateNightly git@github.com:CDAT/cdat workspace/cdat
      python workspace/cdat/scripts/install_miniconda.py -w $WORKDIR -p 'py3'
      
  - &get_testdata
    name: get_testdata
    command: | 
      ls -l  workspace
      git clone git://github.com/cdat/uvcdat-testdata

  - &create_conda_env
    name: create_conda_env
    environment:
       CHANNELS: "-c cdat/label/nightly -c conda-forge -c cdat"
       PKGS: "cdms2 cdat_info udunits2 testsrunner mesalib matplotlib image-compare genutil dv3d cdutil cdtime 'proj4<5' 'numpy>1.14'"
    command: |
       export PATH=$WORKDIR/miniconda/bin:$PATH
       conda config --set always_yes yes --set changeps1 no
       conda update -y -q conda
       conda config --set anaconda_upload no
       if [ $PY_VER = "py2" ] then
          conda create -q -n $PY_VER $CHANNELS $PKGS "python<3"
       else
          conda create -q -n $PY_VER -c cdat/label/linatest $CHANNELS $PKGS "python>3" nbsphinx easydev
       fi 

  - &setup_vcs
    name: setup_vcs
    command: |
       export PATH=$WORKDIR/miniconda/bin:$PATH
       source activate $PY_VER
       python setup.py install --old-and-unmanageable

  - &run_vcs_tests
    name: run_vcs_tests
    command: |
       export PATH=$WORKDIR/miniconda/bin:$PATH
       export CDAT_ANONYMOUS_LOG=False
       export CDAT_SETUP_PATH=${HOME}
       source activate $PY_VER
       # TEMPORARY 
       python run_tests.py -H -v2 -n 2 --checkout-baseline --no-vtk-ui $COVERAGE tests/test_vcs_textbox.py tests/test_vcs_setcolormap.py
       RESULT=$?
       echo "*** $PY_VER test result: "${RESULT} 
       if [ $PY_VER = 'py3' ] then
          cd docs
          make doctest
          DOC_RESULT=$?
          echo "**** $PY_VER doc test result: "${DOC_RESULT}
          RESULT=$(( $RESULT + $DOC_RESULT ))
       fi
       exit $RESULT

  - &conda_upload
    name: conda_upload
    command: |
       if [[ $CIRCLE_BRANCH != 'master' ]]; then
          exit 0
       fi
       export PATH=${HOME}/project/$WORKDIR/miniconda/bin:$PATH
       conda install conda-build anaconda-client
       conda config --set anaconda_upload no
       export CONDA_BLD_PATH=`pwd`/conda_build
       git clone git://github.com/cdat/conda-recipes
       cd conda-recipes
       export PKG_NAME=vcs
       export USER=cdat
       export VERSION=8.0
       export LABEL=nightly
       python ./prep_for_build.py -l $VERSION
       if [ $PY_VER = 'py2' ] then
          conda build $PKG_NAME -c cdat/label/nightly -c conda-forge -c cdat --python=2.7
       else
          conda build $PKG_NAME -c cdat/label/nightly -c conda-forge -c cdat --python=3.6
       fi
       anaconda -t $CONDA_UPLOAD_TOKEN upload -u $USER -l $LABEL $CONDA_BLD_PATH/$OS/$PKG_NAME-$VERSION.`date +%Y*`0.tar.bz2 --force

jobs:
  macos_vcs_py2:
    macos:
      xcode: "9.2.0"
    environment:
      WORKDIR: "workspace/test_macos_vcs_py2"
      OS: "osx-64"
      PY_VER: "py2"
    steps:
      - checkout
      - run: *setup_miniconda
      - run: *get_testdata
      - run: *create_conda_env
      - run: *setup_vcs
      - run: *run_vcs_tests
      - run: *conda_upload
      - store_artifacts:
          path: tests_html
          destination: tests_html
      - store_artifacts:
          path: tests_png
          destination: tests_png

  macos_vcs_py3:
    macos:
      xcode: "9.2.0"
    environment:
      WORKDIR: "workspace/test_macos_vcs_py3"
      OS: "osx-64"
      PY_VER: "py3"
    steps:
      - checkout
      - run: *setup_miniconda
      - run: *get_testdata
      - run: *create_conda_env
      - run: *setup_vcs
      - run: *run_vcs_tests
      - run: *conda_upload
      - store_artifacts:
          path: tests_html
          destination: tests_html
      - store_artifacts:
          path: tests_png
          destination: tests_png

  linux_vcs_py2:
    machine:
      image: circleci/classic:latest
    environment:
      WORKDIR: "workspace/test_linux_vcs"
      OS: "linux-64"
      PY_VER: "py2"
    steps:
      - checkout
      - run: *setup_miniconda
      - run: *get_testdata
      - run: *create_conda_env
      - run: *setup_vcs
      - run: *run_vcs_tests
      - run: *conda_upload
      - store_artifacts:
          path: tests_html
          destination: tests_html
      - store_artifacts:
          path: tests_png
          destination: tests_png

  linux_vcs_py3:
    machine:
      image: circleci/classic:latest
    environment:
      WORKDIR: "workspace/test_linux_vcs"
      OS: "linux-64"
      PY_VER: "py3"
      COVERAGE: "-c tests/coverage.json"
    steps:
      - checkout
      - run: *setup_miniconda
      - run: *get_testdata
      - run: *create_conda_env
      - run: *setup_vcs
      - run: *run_vcs_tests
      - run: *conda_upload
      - store_artifacts:
          path: tests_html
          destination: tests_html
      - store_artifacts:
          path: tests_png
          destination: tests_png

workflows:
  version: 2
  vcs:
    jobs:
      #- macos_vcs_py2
      #- macos_vcs_py3:
      #     requires:
      #        - macos_vcs_py2
      #- linux_vcs_py2
      #- linux_vcs_py3:
      #     requires:
      #        - linux_vcs_py2
      - linux_vcs_py3



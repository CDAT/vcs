Trying:
    cns=vcs.check_name_source # alias for long function name
Expecting nothing
ok
Trying:
    vcs.show('boxfill')
Expecting:
    *******************Boxfill Names List**********************
    ...
    *******************End Boxfill Names List**********************
ok
Trying:
    cns('NEW', 'quick', 'boxfill') # name 'NEW' should be available
Expecting:
    ('NEW', 'quick')
ok
Trying:
    cns(None, 'default', 'boxfill') # generate unique boxfill name
Expecting:
    ('__boxfill_...', 'default')
ok
Trying:
    vcs.show('1d')
Expecting:
    *******************1d Names List**********************
    ...
    *******************End 1d Names List**********************
ok
Trying:
    vcs.create1d() # inherits default, name generated
Expecting:
    <vcs.unified1D.G1d ...>
ok
Trying:
    vcs.create1d("one_D") # inherits default, name "one_D"
Expecting:
    <vcs.unified1D.G1d ...>
ok
Trying:
    vcs.create1d(source="one_D") # inherits from "one_D"
Expecting:
    <vcs.unified1D.G1d ...>
ok
Trying:
    vcs.show('3d_dual_scalar') # available 3d_dual_scalars
Expecting:
    *******************3d_dual_scalar Names List**********************
    ...
    *******************End 3d_dual_scalar Names List**********************
ok
Trying:
    ex=vcs.create3d_dual_scalar('3d_dual_scalar_ex1')
Expecting nothing
ok
Trying:
    vcs.listelements('3d_dual_scalar') # includes new object
Expecting:
    [...'3d_dual_scalar_ex1'...]
ok
Trying:
    vcs.show('3d_scalar') # available 3d_scalars
Expecting:
    *******************3d_scalar Names List**********************
    ...
    *******************End 3d_scalar Names List**********************
ok
Trying:
    ex=vcs.create3d_scalar('3d_scalar_ex1')
Expecting nothing
ok
Trying:
    vcs.listelements('3d_scalar') # includes new object
Expecting:
    [...'3d_scalar_ex1'...]
ok
Trying:
    vcs.show('3d_vector') # available 3d_vectors
Expecting:
    *******************3d_vector Names List**********************
    ...
    *******************End 3d_vector Names List**********************
ok
Trying:
    ex=vcs.create3d_vector('3d_vector_ex1')
Expecting nothing
ok
Trying:
    vcs.listelements('3d_vector') # includes new object
Expecting:
    [...'3d_vector_ex1'...]
ok
Trying:
    vcs.show('boxfill') # available boxfills
Expecting:
    *******************Boxfill Names List**********************
    ...
    *******************End Boxfill Names List**********************
ok
Trying:
    ex=vcs.createboxfill('boxfill_ex1')
Expecting nothing
ok
Trying:
    vcs.listelements('boxfill') # includes new object
Expecting:
    [...'boxfill_ex1'...]
ok
Trying:
    ex2=vcs.createboxfill('boxfill_ex2','polar')
Expecting nothing
ok
Trying:
    vcs.listelements('boxfill') # includes new object
Expecting:
    [...'boxfill_ex2'...]
ok
Trying:
    vcs.show('colormap') # available colormaps
Expecting:
    *******************Colormap Names List**********************
    ...
    *******************End Colormap Names List**********************
ok
Trying:
    ex=vcs.createcolormap('colormap_ex1')
Expecting nothing
ok
Trying:
    vcs.listelements('colormap') # includes new object
Expecting:
    [...'colormap_ex1'...]
ok
Trying:
    ex2=vcs.createcolormap('colormap_ex2','rainbow')
Expecting nothing
ok
Trying:
    vcs.listelements('colormap') # includes new object
Expecting:
    [...'colormap_ex2'...]
ok
Trying:
    vcs.show('fillarea') # available fillareas
Expecting:
    *******************Fillarea Names List**********************
    ...
    *******************End Fillarea Names List**********************
ok
Trying:
    ex=vcs.createfillarea('fillarea_ex1')
Expecting nothing
ok
Trying:
    vcs.listelements('fillarea') # includes new object
Expecting:
    [...'fillarea_ex1'...]
ok
Trying:
    vcs.show('isofill') # available isofills
Expecting:
    *******************Isofill Names List**********************
    ...
    *******************End Isofill Names List**********************
ok
Trying:
    ex=vcs.createisofill('isofill_ex1')
Expecting nothing
ok
Trying:
    vcs.listelements('isofill') # includes new object
Expecting:
    [...'isofill_ex1'...]
ok
Trying:
    ex2=vcs.createisofill('isofill_ex2','polar')
Expecting nothing
ok
Trying:
    vcs.listelements('isofill') # includes new object
Expecting:
    [...'isofill_ex2'...]
ok
Trying:
    vcs.show('isoline') # available isolines
Expecting:
    *******************Isoline Names List**********************
    ...
    *******************End Isoline Names List**********************
ok
Trying:
    ex=vcs.createisoline('isoline_ex1')
Expecting nothing
ok
Trying:
    vcs.listelements('isoline') # includes new object
Expecting:
    [...'isoline_ex1'...]
ok
Trying:
    ex2=vcs.createisoline('isoline_ex2','polar')
Expecting nothing
ok
Trying:
    vcs.listelements('isoline') # includes new object
Expecting:
    [...'isoline_ex2'...]
ok
Trying:
    vcs.show('line') # available lines
Expecting:
    *******************Line Names List**********************
    ...
    *******************End Line Names List**********************
ok
Trying:
    ex=vcs.createline('line_ex1')
Expecting nothing
ok
Trying:
    vcs.listelements('line') # includes new object
Expecting:
    [...'line_ex1'...]
ok
Trying:
    ex2=vcs.createline('line_ex2','red')
Expecting nothing
ok
Trying:
    vcs.listelements('line') # includes new object
Expecting:
    [...'line_ex2'...]
ok
Trying:
    vcs.show('marker') # available markers
Expecting:
    *******************Marker Names List**********************
    ...
    *******************End Marker Names List**********************
ok
Trying:
    ex=vcs.createmarker('marker_ex1')
Expecting nothing
ok
Trying:
    vcs.listelements('marker') # includes new object
Expecting:
    [...'marker_ex1'...]
ok
Trying:
    ex2=vcs.createmarker('marker_ex2','red')
Expecting nothing
ok
Trying:
    vcs.listelements('marker') # includes new object
Expecting:
    [...'marker_ex2'...]
ok
Trying:
    vcs.show('meshfill') # available meshfills
Expecting:
    *******************Meshfill Names List**********************
    ...
    *******************End Meshfill Names List**********************
ok
Trying:
    ex=vcs.createmeshfill('meshfill_ex1')
Expecting nothing
ok
Trying:
    vcs.listelements('meshfill') # includes new object
Expecting:
    [...'meshfill_ex1'...]
ok
Trying:
    ex2=vcs.createmeshfill('meshfill_ex2','a_polar_meshfill')
Expecting nothing
ok
Trying:
    vcs.listelements('meshfill') # includes new object
Expecting:
    [...'meshfill_ex2'...]
ok
Trying:
    vcs.show('projection') # available projections
Expecting:
    *******************Projection Names List**********************
    ...
    *******************End Projection Names List**********************
ok
Trying:
    ex=vcs.createprojection('projection_ex1')
Expecting nothing
ok
Trying:
    vcs.listelements('projection') # includes new object
Expecting:
    [...'projection_ex1'...]
ok
Trying:
    ex2=vcs.createprojection('projection_ex2','orthographic')
Expecting nothing
ok
Trying:
    vcs.listelements('projection') # includes new object
Expecting:
    [...'projection_ex2'...]
ok
Trying:
    vcs.show('scatter') # available scatters
Expecting:
    *******************Scatter Names List**********************
    ...
    *******************End Scatter Names List**********************
ok
Trying:
    ex=vcs.createscatter('scatter_ex1')
Expecting nothing
ok
Trying:
    vcs.listelements('scatter') # includes new object
Expecting:
    [...'scatter_ex1'...]
ok
Trying:
    vcs.show('taylordiagram') # available taylordiagrams
Expecting:
    *******************Taylordiagram Names List**********************
    ...
    *******************End Taylordiagram Names List**********************
ok
Trying:
    ex=vcs.createtaylordiagram('taylordiagram_ex1')
Expecting nothing
ok
Trying:
    vcs.listelements('taylordiagram') # includes new object
Expecting:
    [...'taylordiagram_ex1'...]
ok
Trying:
    vcs.show('template') # available templates
Expecting:
    *******************Template Names List**********************
    ...
    *******************End Template Names List**********************
ok
Trying:
    ex=vcs.createtemplate('template_ex1')
Expecting nothing
ok
Trying:
    vcs.listelements('template') # includes new object
Expecting:
    [...'template_ex1'...]
ok
Trying:
    ex2=vcs.createtemplate('template_ex2','polar')
Expecting nothing
ok
Trying:
    vcs.listelements('template') # includes new object
Expecting:
    [...'template_ex2'...]
ok
Trying:
    vcs.show('textcombined') # available textcombineds
Expecting:
    *******************Textcombined Names List**********************
    ...
    *******************End Textcombined Names List**********************
**********************************************************************
File "/Users/brown308/anaconda/envs/2.8/lib/python2.7/site-packages/vcs/manageElements.py", line 1296, in vcs.manageElements.createtext
Failed example:
    vcs.show('textcombined') # available textcombineds
Expected:
    *******************Textcombined Names List**********************
    ...
    *******************End Textcombined Names List**********************
Got:
    *******************Textcombined Names List**********************
    *******************End Textcombined Names List**********************
Trying:
    try: # try to create a new textcombined, in case none exist
        vcs.createtextcombined('EXAMPLE_tt', 'qa', 'EXAMPLE_tto', '7left')
    except:
        pass
Expecting nothing
**********************************************************************
File "/Users/brown308/anaconda/envs/2.8/lib/python2.7/site-packages/vcs/manageElements.py", line 1300, in vcs.manageElements.createtext
Failed example:
    try: # try to create a new textcombined, in case none exist
        vcs.createtextcombined('EXAMPLE_tt', 'qa', 'EXAMPLE_tto', '7left')
    except:
        pass
Expected nothing
Got:
    <vcs.textcombined.Tc object at 0x117f54500>
Trying:
    vcs.listelements('textcombined') # includes new object
Expecting:
    [...'EXAMPLE_tt:::EXAMPLE_tto'...]
ok
Trying:
    vcs.show('textorientation') # available textorientations
Expecting:
    *******************Textorientation Names List**********************
    ...
    *******************End Textorientation Names List**********************
ok
Trying:
    ex=vcs.createtextorientation('textorientation_ex1')
Expecting nothing
ok
Trying:
    vcs.listelements('textorientation') # includes new object
Expecting:
    [...'textorientation_ex1'...]
ok
Trying:
    ex2=vcs.createtextorientation('textorientation_ex2','bigger')
Expecting nothing
ok
Trying:
    vcs.listelements('textorientation') # includes new object
Expecting:
    [...'textorientation_ex2'...]
ok
Trying:
    vcs.show('texttable') # available texttables
Expecting:
    *******************Texttable Names List**********************
    ...
    *******************End Texttable Names List**********************
ok
Trying:
    ex=vcs.createtexttable('texttable_ex1')
Expecting nothing
ok
Trying:
    vcs.listelements('texttable') # includes new object
Expecting:
    [...'texttable_ex1'...]
ok
Trying:
    ex2=vcs.createtexttable('texttable_ex2','bigger')
Expecting nothing
ok
Trying:
    vcs.listelements('texttable') # includes new object
Expecting:
    [...'texttable_ex2'...]
ok
Trying:
    vcs.show('vector') # available vectors
Expecting:
    *******************Vector Names List**********************
    ...
    *******************End Vector Names List**********************
ok
Trying:
    ex=vcs.createvector('vector_ex1')
Expecting nothing
ok
Trying:
    vcs.listelements('vector') # includes new object
Expecting:
    [...'vector_ex1'...]
ok
Trying:
    vcs.show('xvsy') # available xvsys
Expecting:
    *******************Xvsy Names List**********************
    ...
    *******************End Xvsy Names List**********************
ok
Trying:
    ex=vcs.createxvsy('xvsy_ex1')
Expecting nothing
ok
Trying:
    vcs.listelements('xvsy') # includes new object
Expecting:
    [...'xvsy_ex1'...]
ok
Trying:
    vcs.show('xyvsy') # available xyvsys
Expecting:
    *******************Xyvsy Names List**********************
    ...
    *******************End Xyvsy Names List**********************
ok
Trying:
    ex=vcs.createxyvsy('xyvsy_ex1')
Expecting nothing
ok
Trying:
    vcs.listelements('xyvsy') # includes new object
Expecting:
    [...'xyvsy_ex1'...]
ok
Trying:
    vcs.show('yxvsx') # available yxvsxs
Expecting:
    *******************Yxvsx Names List**********************
    ...
    *******************End Yxvsx Names List**********************
ok
Trying:
    ex=vcs.createyxvsx('yxvsx_ex1')
Expecting nothing
ok
Trying:
    vcs.listelements('yxvsx') # includes new object
Expecting:
    [...'yxvsx_ex1'...]
ok
Trying:
    vcs.show('1d')
Expecting:
    *******************1d Names List**********************
    ...
    *******************End 1d Names List**********************
ok
Trying:
    vcs.get1d('blue_yxvsx')
Expecting:
    <vcs.unified1D.G1d ...>
ok
Trying:
    a=vcs.init()
Expecting nothing
ok
Trying:
    vcs.listelements('3d_dual_scalar') # list all 3d_dual_scalars
Expecting:
    [...]
ok
Trying:
    ex=vcs.get3d_dual_scalar()  # 'default' 3d_dual_scalar
Expecting nothing
ok
Trying:
    import cdms2 # Need cdms2 to create a slab
Expecting nothing
ok
Trying:
    f = cdms2.open(vcs.sample_data+'/clt.nc') # get data with cdms2
Expecting nothing
ok
Trying:
    slab1 = f('u') # take a slab from the data
Expecting nothing
ok
Trying:
    slab2 = f('v') # need 2 slabs, so get another
Expecting nothing
ok
Trying:
    a.plot(ex, slab1, slab2) # plot 3d_dual_scalar
Expecting:
    <vcs.displayplot.Dp ...>
**********************************************************************
File "/Users/brown308/anaconda/envs/2.8/lib/python2.7/site-packages/vcs/manageElements.py", line 1561, in vcs.manageElements.get3d_dual_scalar
Failed example:
    a.plot(ex, slab1, slab2) # plot 3d_dual_scalar
Expected:
    <vcs.displayplot.Dp ...>
Got:
    initCamera: Camera => ((0.0, 0.0, 540.0), (0.0, 0.0, 0.0), (0.0, 1.0, 0.0)) 
    <vcs.displayplot.Dp object at 0x1184fc4b0>
Trying:
    a=vcs.init()
Expecting nothing
ok
Trying:
    vcs.listelements('3d_scalar') # list all 3d_scalars
Expecting:
    [...]
ok
Trying:
    ex=vcs.get3d_scalar()  # 'default' 3d_scalar
Expecting nothing
ok
Trying:
    import cdms2 # Need cdms2 to create a slab
Expecting nothing
ok
Trying:
    f = cdms2.open(vcs.sample_data+'/clt.nc') # get data with cdms2
Expecting nothing
ok
Trying:
    slab1 = f('u') # take a slab from the data
Expecting nothing
ok
Trying:
    a.plot(ex, slab1) # plot 3d_scalar
Expecting:
    <vcs.displayplot.Dp ...>
**********************************************************************
File "/Users/brown308/anaconda/envs/2.8/lib/python2.7/site-packages/vcs/manageElements.py", line 1521, in vcs.manageElements.get3d_scalar
Failed example:
    a.plot(ex, slab1) # plot 3d_scalar
Expected:
    <vcs.displayplot.Dp ...>
Got:
    initCamera: Camera => ((0.0, 0.0, 540.0), (0.0, 0.0, 0.0), (0.0, 1.0, 0.0)) 
    <vcs.displayplot.Dp object at 0x11816fe88>
Trying:
    a=vcs.init()
Expecting nothing
ok
Trying:
    vcs.listelements('3d_vector') # list all 3d_vectors
Expecting:
    [...]
ok
Trying:
    ex=vcs.get3d_vector()  # 'default' 3d_vector
Expecting nothing
ok
Trying:
    import cdms2 # Need cdms2 to create a slab
Expecting nothing
ok
Trying:
    f = cdms2.open(vcs.sample_data+'/clt.nc') # get data with cdms2
Expecting nothing
ok
Trying:
    slab1 = f('u') # take a slab from the data
Expecting nothing
ok
Trying:
    slab2 = f('v') # need 2 slabs, so get another
Expecting nothing
ok
Trying:
    a.plot(ex, slab1, slab2) # plot 3d_vector
Expecting:
    <vcs.displayplot.Dp ...>
**********************************************************************
File "/Users/brown308/anaconda/envs/2.8/lib/python2.7/site-packages/vcs/manageElements.py", line 1600, in vcs.manageElements.get3d_vector
Failed example:
    a.plot(ex, slab1, slab2) # plot 3d_vector
Expected:
    <vcs.displayplot.Dp ...>
Got:
    Sample rate: 6 
    Sample rate: 6 
    initCamera: Camera => ((0.0, 0.0, 540.0), (0.0, 0.0, 0.0), (0.0, 1.0, 0.0)) 
    <vcs.displayplot.Dp object at 0x11813e4b0>
Trying:
    a=vcs.init()
Expecting nothing
ok
Trying:
    vcs.listelements('boxfill') # list all boxfills
Expecting:
    [...]
ok
Trying:
    ex=vcs.getboxfill()  # 'default' boxfill
Expecting nothing
ok
Trying:
    import cdms2 # Need cdms2 to create a slab
Expecting nothing
ok
Trying:
    f = cdms2.open(vcs.sample_data+'/clt.nc') # get data with cdms2
Expecting nothing
ok
Trying:
    slab1 = f('u') # take a slab from the data
Expecting nothing
ok
Trying:
    a.boxfill(ex, slab1) # plot boxfill
Expecting:
    <vcs.displayplot.Dp ...>
ok
Trying:
    ex2=vcs.getboxfill('polar')  # boxfill #2
Expecting nothing
ok
Trying:
    a.boxfill(ex2, slab1) # plot boxfill
Expecting:
    <vcs.displayplot.Dp ...>
ok
Trying:
    a=vcs.init()
Expecting nothing
ok
Trying:
    vcs.listelements('colormap') # list all colormaps
Expecting:
    [...]
ok
Trying:
    ex=vcs.getcolormap()  # 'default' colormap
Expecting nothing
ok
Trying:
    ex2=vcs.getcolormap('rainbow')  # colormap #2
Expecting nothing
ok
Trying:
    a=vcs.init()
Expecting nothing
ok
Trying:
    vcs.listelements('fillarea') # list all fillareas
Expecting:
    [...]
ok
Trying:
    ex=vcs.getfillarea()  # 'default' fillarea
Expecting nothing
ok
Trying:
    a.fillarea(ex) # plot fillarea
Expecting:
    <vcs.displayplot.Dp ...>
ok
Trying:
    a=vcs.init()
Expecting nothing
ok
Trying:
    vcs.listelements('isofill') # list all isofills
Expecting:
    [...]
ok
Trying:
    ex=vcs.getisofill()  # 'default' isofill
Expecting nothing
ok
Trying:
    import cdms2 # Need cdms2 to create a slab
Expecting nothing
ok
Trying:
    f = cdms2.open(vcs.sample_data+'/clt.nc') # get data with cdms2
Expecting nothing
ok
Trying:
    slab1 = f('u') # take a slab from the data
Expecting nothing
ok
Trying:
    a.isofill(ex, slab1) # plot isofill
Expecting:
    <vcs.displayplot.Dp ...>
ok
Trying:
    ex2=vcs.getisofill('polar')  # isofill #2
Expecting nothing
ok
Trying:
    a.isofill(ex2, slab1) # plot isofill
Expecting:
    <vcs.displayplot.Dp ...>
ok
Trying:
    a=vcs.init()
Expecting nothing
ok
Trying:
    vcs.listelements('isoline') # list all isolines
Expecting:
    [...]
ok
Trying:
    ex=vcs.getisoline()  # 'default' isoline
Expecting nothing
ok
Trying:
    import cdms2 # Need cdms2 to create a slab
Expecting nothing
ok
Trying:
    f = cdms2.open(vcs.sample_data+'/clt.nc') # get data with cdms2
Expecting nothing
ok
Trying:
    slab1 = f('u') # take a slab from the data
Expecting nothing
ok
Trying:
    a.isoline(ex, slab1) # plot isoline
Expecting:
    <vcs.displayplot.Dp ...>
ok
Trying:
    ex2=vcs.getisoline('polar')  # isoline #2
Expecting nothing
ok
Trying:
    a.isoline(ex2, slab1) # plot isoline
Expecting:
    <vcs.displayplot.Dp ...>
ok
Trying:
    a=vcs.init()
Expecting nothing
ok
Trying:
    vcs.listelements('line') # list all lines
Expecting:
    [...]
ok
Trying:
    ex=vcs.getline()  # 'default' line
Expecting nothing
ok
Trying:
    a.line(ex) # plot line
Expecting:
    <vcs.displayplot.Dp ...>
ok
Trying:
    ex2=vcs.getline('red')  # line #2
Expecting nothing
ok
Trying:
    a.line(ex2) # plot line
Expecting:
    <vcs.displayplot.Dp ...>
ok
Trying:
    a=vcs.init()
Expecting nothing
ok
Trying:
    vcs.listelements('marker') # list all markers
Expecting:
    [...]
ok
Trying:
    ex=vcs.getmarker()  # 'default' marker
Expecting nothing
ok
Trying:
    a.marker(ex) # plot marker
Expecting:
    <vcs.displayplot.Dp ...>
ok
Trying:
    ex2=vcs.getmarker('red')  # marker #2
Expecting nothing
ok
Trying:
    a.marker(ex2) # plot marker
Expecting:
    <vcs.displayplot.Dp ...>
ok
Trying:
    a=vcs.init()
Expecting nothing
ok
Trying:
    vcs.listelements('meshfill') # list all meshfills
Expecting:
    [...]
ok
Trying:
    ex=vcs.getmeshfill()  # 'default' meshfill
Expecting nothing
ok
Trying:
    import cdms2 # Need cdms2 to create a slab
Expecting nothing
ok
Trying:
    f = cdms2.open(vcs.sample_data+'/clt.nc') # get data with cdms2
Expecting nothing
ok
Trying:
    slab1 = f('u') # take a slab from the data
Expecting nothing
ok
Trying:
    a.meshfill(ex, slab1) # plot meshfill
Expecting:
    <vcs.displayplot.Dp ...>
ok
Trying:
    ex2=vcs.getmeshfill('a_polar_meshfill')  # meshfill #2
Expecting nothing
ok
Trying:
    a.meshfill(ex2, slab1) # plot meshfill
Expecting:
    <vcs.displayplot.Dp ...>
ok
Trying:
    a=vcs.init()
Expecting nothing
ok
Trying:
    vcs.listelements('projection') # list all projections
Expecting:
    [...]
ok
Trying:
    ex=vcs.getprojection()  # 'default' projection
Expecting nothing
ok
Trying:
    import cdms2 # Need cdms2 to create a slab
Expecting nothing
ok
Trying:
    f = cdms2.open(vcs.sample_data+'/clt.nc') # get data with cdms2
Expecting nothing
ok
Trying:
    slab1 = f('u') # take a slab from the data
Expecting nothing
ok
Trying:
    ex2=vcs.getprojection('orthographic')  # projection #2
Expecting nothing
ok
Trying:
    a=vcs.init()
Expecting nothing
ok
Trying:
    vcs.listelements('scatter') # list all scatters
Expecting:
    [...]
ok
Trying:
    ex=vcs.getscatter('default_scatter_')  # ''default_scatter_'' scatter
Expecting nothing
ok
Trying:
    import cdms2 # Need cdms2 to create a slab
Expecting nothing
ok
Trying:
    f = cdms2.open(vcs.sample_data+'/clt.nc') # get data with cdms2
Expecting nothing
ok
Trying:
    slab1 = f('u') # take a slab from the data
Expecting nothing
ok
Trying:
    slab2 = f('v') # need 2 slabs, so get another
Expecting nothing
ok
Trying:
    a.scatter(ex, slab1, slab2) # plot scatter
Expecting:
    <vcs.displayplot.Dp ...>
ok
Trying:
    a=vcs.init()
Expecting nothing
ok
Trying:
    vcs.listelements('taylordiagram') # list all taylordiagrams
Expecting:
    [...]
ok
Trying:
    ex=vcs.gettaylordiagram()  # 'default' taylordiagram
Expecting nothing
ok
Trying:
    slab1 = [[0, 1, 2, 3, 4], [0.1, 0.2, 0.3, 0.4, 0.5]] # data
Expecting nothing
ok
Trying:
    a.taylordiagram(ex, slab1) # plot taylordiagram
Expecting:
    <vcs.displayplot.Dp ...>
ok
Trying:
    a=vcs.init()
Expecting nothing
ok
Trying:
    vcs.listelements('template') # list all templates
Expecting:
    [...]
ok
Trying:
    ex=vcs.gettemplate()  # 'default' template
Expecting nothing
ok
Trying:
    import cdms2 # Need cdms2 to create a slab
Expecting nothing
ok
Trying:
    f = cdms2.open(vcs.sample_data+'/clt.nc') # get data with cdms2
Expecting nothing
ok
Trying:
    slab1 = f('u') # take a slab from the data
Expecting nothing
ok
Trying:
    ex2=vcs.gettemplate('polar')  # template #2
Expecting nothing
ok
Trying:
    a=vcs.init()
Expecting nothing
ok
Trying:
    vcs.listelements('textcombined') # list all textcombineds
Expecting:
    [...]
ok
Trying:
    try: # try to create a new textcombined, in case none exist
        vcs.createtextcombined('EXAMPLE_tt', 'qa', 'EXAMPLE_tto', '7left')
    except:
        pass
Expecting nothing
ok
Trying:
    ex=vcs.gettextcombined('EXAMPLE_tt', 'EXAMPLE_tto')  # 'EXAMPLE_tt:::EXAMPLE_tto' textcombined
Expecting nothing
ok
Trying:
    a.textcombined(ex) # plot textcombined
Expecting:
    <vcs.displayplot.Dp ...>
ok
Trying:
    a=vcs.init()
Expecting nothing
ok
Trying:
    vcs.listelements('textorientation') # list all textorientations
Expecting:
    [...]
ok
Trying:
    ex=vcs.gettextorientation()  # 'default' textorientation
Expecting nothing
ok
Trying:
    ex2=vcs.gettextorientation('bigger')  # textorientation #2
Expecting nothing
ok
Trying:
    a=vcs.init()
Expecting nothing
ok
Trying:
    vcs.listelements('texttable') # list all texttables
Expecting:
    [...]
ok
Trying:
    ex=vcs.gettexttable()  # 'default' texttable
Expecting nothing
ok
Trying:
    ex2=vcs.gettexttable('bigger')  # texttable #2
Expecting nothing
ok
Trying:
    a=vcs.init()
Expecting nothing
ok
Trying:
    vcs.listelements('vector') # list all vectors
Expecting:
    [...]
ok
Trying:
    ex=vcs.getvector()  # 'default' vector
Expecting nothing
ok
Trying:
    import cdms2 # Need cdms2 to create a slab
Expecting nothing
ok
Trying:
    f = cdms2.open(vcs.sample_data+'/clt.nc') # get data with cdms2
Expecting nothing
ok
Trying:
    slab1 = f('u') # take a slab from the data
Expecting nothing
ok
Trying:
    slab2 = f('v') # need 2 slabs, so get another
Expecting nothing
ok
Trying:
    a.vector(ex, slab1, slab2) # plot vector
Expecting:
    <vcs.displayplot.Dp ...>
ok
Trying:
    a=vcs.init()
Expecting nothing
ok
Trying:
    vcs.listelements('xvsy') # list all xvsys
Expecting:
    [...]
ok
Trying:
    ex=vcs.getxvsy()  # 'default_xvsy_' xvsy
Expecting nothing
ok
Trying:
    import cdms2 # Need cdms2 to create a slab
Expecting nothing
ok
Trying:
    f = cdms2.open(vcs.sample_data+'/clt.nc') # get data with cdms2
Expecting nothing
ok
Trying:
    slab1 = f('u') # take a slab from the data
Expecting nothing
ok
Trying:
    slab2 = f('v') # need 2 slabs, so get another
Expecting nothing
ok
Trying:
    a.xvsy(ex, slab1, slab2) # plot xvsy
Expecting:
    <vcs.displayplot.Dp ...>
ok
Trying:
    a=vcs.init()
Expecting nothing
ok
Trying:
    vcs.listelements('xyvsy') # list all xyvsys
Expecting:
    [...]
ok
Trying:
    ex=vcs.getxyvsy('default_xyvsy_')  # ''default_xyvsy_'' xyvsy
Expecting nothing
ok
Trying:
    import cdms2 # Need cdms2 to create a slab
Expecting nothing
ok
Trying:
    f = cdms2.open(vcs.sample_data+'/clt.nc') # get data with cdms2
Expecting nothing
ok
Trying:
    slab1 = f('u') # take a slab from the data
Expecting nothing
ok
Trying:
    a.xyvsy(ex, slab1) # plot xyvsy
Expecting:
    <vcs.displayplot.Dp ...>
ok
Trying:
    a=vcs.init()
Expecting nothing
ok
Trying:
    vcs.listelements('yxvsx') # list all yxvsxs
Expecting:
    [...]
ok
Trying:
    ex=vcs.getyxvsx()  # 'default_yxvsx_' yxvsx
Expecting nothing
ok
Trying:
    import cdms2 # Need cdms2 to create a slab
Expecting nothing
ok
Trying:
    f = cdms2.open(vcs.sample_data+'/clt.nc') # get data with cdms2
Expecting nothing
ok
Trying:
    slab1 = f('u') # take a slab from the data
Expecting nothing
ok
Trying:
    a.yxvsx(ex, slab1) # plot yxvsx
Expecting:
    <vcs.displayplot.Dp ...>
ok
Trying:
    a=vcs.init()
Expecting nothing
ok
Trying:
    iso=a.createisoline('dean') # Create an instance of an isoline object
Expecting nothing
ok
Trying:
    a.removeobject(iso) # Remove isoline object from VCS list
Expecting:
    'Removed isoline object dean'
ok
Trying:
    vcs.show('line')
Expecting:
    *******************Line Names List**********************
    ...
    *******************End Line Names List**********************
ok
Trying:
    new_isoline = vcs.createisoline('new_iso')
Expecting nothing
ok
Trying:
    vcs.setLineAttributes(new_isoline, 'continents')
Expecting nothing
ok
Trying:
    new_vector = vcs.createvector('new_vec')
Expecting nothing
ok
Trying:
    vcs.setLineAttributes(new_vector, 'continents')
Expecting nothing
ok
Trying:
    new_1d = vcs.create1d('new_1d', 'blue_yxvsx')
Expecting nothing
ok
Trying:
    vcs.setLineAttributes(new_1d, 'continents')
Expecting nothing
ok
22 items had no tests:
    vcs.manageElements
    vcs.manageElements.removeCp
    vcs.manageElements.removeG
    vcs.manageElements.removeG1d
    vcs.manageElements.removeGSp
    vcs.manageElements.removeGXY
    vcs.manageElements.removeGXy
    vcs.manageElements.removeGYx
    vcs.manageElements.removeGfb
    vcs.manageElements.removeGfi
    vcs.manageElements.removeGfm
    vcs.manageElements.removeGi
    vcs.manageElements.removeGtd
    vcs.manageElements.removeGv
    vcs.manageElements.removeP
    vcs.manageElements.removeProj
    vcs.manageElements.removeTc
    vcs.manageElements.removeTf
    vcs.manageElements.removeTl
    vcs.manageElements.removeTm
    vcs.manageElements.removeTo
    vcs.manageElements.removeTt
45 items passed all tests:
   4 tests in vcs.manageElements.check_name_source
   4 tests in vcs.manageElements.create1d
   3 tests in vcs.manageElements.create3d_dual_scalar
   3 tests in vcs.manageElements.create3d_scalar
   3 tests in vcs.manageElements.create3d_vector
   5 tests in vcs.manageElements.createboxfill
   5 tests in vcs.manageElements.createcolormap
   3 tests in vcs.manageElements.createfillarea
   5 tests in vcs.manageElements.createisofill
   5 tests in vcs.manageElements.createisoline
   5 tests in vcs.manageElements.createline
   5 tests in vcs.manageElements.createmarker
   5 tests in vcs.manageElements.createmeshfill
   5 tests in vcs.manageElements.createprojection
   3 tests in vcs.manageElements.createscatter
   3 tests in vcs.manageElements.createtaylordiagram
   5 tests in vcs.manageElements.createtemplate
   5 tests in vcs.manageElements.createtextorientation
   5 tests in vcs.manageElements.createtexttable
   3 tests in vcs.manageElements.createvector
   3 tests in vcs.manageElements.createxvsy
   3 tests in vcs.manageElements.createxyvsy
   3 tests in vcs.manageElements.createyxvsx
   2 tests in vcs.manageElements.get1d
   9 tests in vcs.manageElements.getboxfill
   4 tests in vcs.manageElements.getcolormap
   4 tests in vcs.manageElements.getfillarea
   9 tests in vcs.manageElements.getisofill
   9 tests in vcs.manageElements.getisoline
   6 tests in vcs.manageElements.getline
   6 tests in vcs.manageElements.getmarker
   9 tests in vcs.manageElements.getmeshfill
   7 tests in vcs.manageElements.getprojection
   8 tests in vcs.manageElements.getscatter
   5 tests in vcs.manageElements.gettaylordiagram
   7 tests in vcs.manageElements.gettemplate
   5 tests in vcs.manageElements.gettextcombined
   4 tests in vcs.manageElements.gettextorientation
   4 tests in vcs.manageElements.gettexttable
   8 tests in vcs.manageElements.getvector
   8 tests in vcs.manageElements.getxvsy
   7 tests in vcs.manageElements.getxyvsy
   7 tests in vcs.manageElements.getyxvsx
   3 tests in vcs.manageElements.removeobject
   7 tests in vcs.manageElements.setLineAttributes
**********************************************************************
4 items had failures:
   2 of   3 in vcs.manageElements.createtext
   1 of   8 in vcs.manageElements.get3d_dual_scalar
   1 of   7 in vcs.manageElements.get3d_scalar
   1 of   8 in vcs.manageElements.get3d_vector
257 tests in 71 items.
252 passed and 5 failed.
***Test Failed*** 5 failures.

Trying:
    import vcs
Expecting nothing
ok
Trying:
    import os
Expecting nothing
ok
Trying:
    import sys
Expecting nothing
ok
Trying:
    x=vcs.init()
Expecting nothing
ok
Trying:
    x.open()
Expecting nothing
ok
Trying:
    logo1 = vcs.utils.Logo(os.path.join(sys.prefix,"share","vcs","uvcdat.png"))
Expecting nothing
ok
Trying:
    logo1.x=.7
Expecting nothing
ok
Trying:
    logo1.y=.8
Expecting nothing
ok
Trying:
    logo2 = vcs.utils.Logo("My Test Logo")
Expecting nothing
ok
Trying:
    logo2.x = .2
Expecting nothing
ok
Trying:
    logo2.y = .2
Expecting nothing
ok
Trying:
    logo1.plot(x)
Expecting nothing
ok
Trying:
    logo2.plot(x)
Expecting nothing
ok
Trying:
    import os, sys
Expecting nothing
ok
Trying:
    x=vcs.init()
Expecting nothing
ok
Trying:
    x.open()
Expecting nothing
ok
Trying:
    logo1 = vcs.utils.Logo(os.path.join(sys.prefix,"share/vcs/uvcdat.png"))
Expecting nothing
ok
Trying:
    logo1.x=.7
Expecting nothing
ok
Trying:
    logo1.y=.8
Expecting nothing
ok
Trying:
    logo2 = vcs.utils.Logo("My Test Logo")
Expecting nothing
ok
Trying:
    logo2.x = .2
Expecting nothing
ok
Trying:
    logo2.y = .2
Expecting nothing
ok
Trying:
    logo1.plot(x)
Expecting nothing
ok
Trying:
    logo2.plot(x)
Expecting nothing
ok
Trying:
    cgm=vcs.creategraphicsmethod # alias long name
Expecting nothing
ok
Trying:
    cgm('Gfm') # meshfill inherits default; name generated
Expecting:
    <vcs.meshfill.Gfm ...>
ok
Trying:
    cgm('boxfill','polar') # boxfill inherits polar; name generated
Expecting:
    <vcs.boxfill.Gfb ...>
ok
Trying:
    cgm('Gfi',name='my_gfi') # isofill inherits default; user-named
Expecting:
    <vcs.isofill.Gfi ...>
ok
Trying:
    import os # use this to check if sample data already exists
Expecting nothing
ok
Trying:
    if not os.path.isdir(vcs.sample_data):
        vcs.download_sample_data_files()
Expecting nothing
ok
Trying:
    import vcs
Expecting nothing
ok
Trying:
    x = vcs.init()
Expecting nothing
ok
Trying:
    t = vcs.createtemplate()
Expecting nothing
ok
Trying:
    vcs.utils.drawLinesAndMarkersLegend(x,t.legend,
        ["red","blue","green"], ["solid","dash","dot"],[1,4,8],
        ["blue","green","red"], ["cross","square","dot"],[3,4,5],
        ["sample A","type B","thing C"], bg=True)
Expecting nothing
ok
Trying:
    x.png("sample")
Expecting nothing
ok
Trying:
    b=vcs.getboxfill()
Expecting nothing
ok
Trying:
    t=vcs.gettemplate()
Expecting nothing
ok
Trying:
    bd=vcs.dumpToDict(b) # serializes all properties
Expecting nothing
ok
Trying:
    td=vcs.dumpToDict(t, skipped=['legend']) # skip legend property
Expecting nothing
ok
Trying:
    'legend' in td[0].keys() # 'legend' should not be in dictionary
Expecting:
    False
ok
Trying:
    box=vcs.getboxfill()
Expecting nothing
ok
Trying:
    vcs.dumpToJson(box, 'box.json') # output properties to file
Expecting nothing
ok
Trying:
    vcs.dumpToJson(box,None) # returns JSON string
Expecting:
    '{...}'
ok
Trying:
    import cdtime
Expecting nothing
ok
Trying:
    lbls = vcs.generate_time_labels(cdtime.reltime(0,'months since 2000'),
        cdtime.reltime(12,'months since 2000'),
        'days since 1800') # for the year 2000 in units of 'days since 1800'
Expecting nothing
ok
Trying:
    lbls = vcs.generate_time_labels(cdtime.reltime(0,'months since 2000'),
        cdtime.comptime(2001),
        'days since 1800') # for the year 2000 in units of 'days since 1800'
Expecting nothing
ok
Trying:
    lbls = vcs.generate_time_labels(0, 12, 'months since 2000') # time labels for year 2000
Expecting nothing
ok
Trying:
    a=vcs.init()
Expecting nothing
ok
Trying:
    box=vcs.getboxfill('polar')
Expecting nothing
ok
Trying:
    array=[range(10) for _ in range(10)]
Expecting nothing
ok
Trying:
    a.plot(box,array) # plot something on canvas
Expecting:
    <vcs.displayplot.Dp ...>
ok
Trying:
    a.png('box.png') # make a png
Expecting nothing
ok
Trying:
    vcs.get_png_dims('box.png') # get (width, height) of 'box.png'
Expecting:
    (1536, 1186)
ok
Trying:
    a=vcs.init()
Expecting nothing
ok
Trying:
    b=vcs.createboxfill()
Expecting nothing
ok
Trying:
    b.colormap='rainbow'
Expecting nothing
ok
Trying:
    a.getcolorcell(2,b)
Expecting:
    [26, 1, 34, 100]
ok
Trying:
    a=vcs.init()
Expecting nothing
ok
Trying:
    a.show('colormap') # Show all the existing colormap secondary methods
Expecting:
    *******************Colormap Names List**********************
    ...
    *******************End Colormap Names List**********************
ok
Trying:
    cp=a.getcolormap() # cp instance of 'default' colormap secondary method
Expecting nothing
ok
Trying:
    cp2=a.getcolormap('rainbow') # cp2 instance of existing 'rainbow' colormap secondary method
Expecting nothing
ok
Trying:
    a=[0.0, 2.0, 4.0, 6.0, 8.0, 10.0, 12.0, 14.0, 16.0, 18.0, 20.0]
Expecting nothing
ok
Trying:
    vcs.getcolors (a)
Expecting:
    [0, 28, 57, 85, 113, 142, 170, 198, 227, 255]
ok
Trying:
    vcs.getcolors (a,colors=range(16,200))
Expecting:
    [16, 36, 57, 77, 97, 118, 138, 158, 179, 199]
ok
Trying:
    vcs.getcolors(a,colors=[16,25,15,56,35,234,12,11,19,32,132,17])
Expecting:
    [16, 25, 15, 35, 234, 12, 11, 32, 132, 17]
ok
Trying:
    a=[-6.0, -2.0, 2.0, 6.0, 10.0, 14.0, 18.0, 22.0, 26.0]
Expecting nothing
ok
Trying:
    vcs.getcolors (a,white=241)
Expecting:
    [0, 241, 128, 153, 179, 204, 230, 255]
ok
Trying:
    vcs.getcolors (a,white=241,split=0)
Expecting:
    [0, 36, 73, 109, 146, 182, 219, 255]
ok
Trying:
    vcs.getfontname(1)
Expecting:
    'default'
ok
Trying:
    vcs.getfontname(4)
Expecting:
    'Helvetica'
ok
Trying:
    vcs.getfontnumber('default')
Expecting:
    1
ok
Trying:
    vcs.getfontnumber('Helvetica')
Expecting:
    4
ok
Trying:
    vcs.show('boxfill') # list available boxfills
Expecting:
    *******************Boxfill Names List**********************
    ...
    *******************End Boxfill Names List**********************
ok
Trying:
    vcs.getgraphicsmethod('boxfill','polar') # get polar boxfill
Expecting:
    <vcs.boxfill.Gfb ...>
ok
Trying:
    import cdms2, os
Expecting nothing
ok
Trying:
    if not os.path.exists(vcs.sample_data):
        vcs.download_sample_data_files() # get some data for cdms2
Expecting nothing
ok
Trying:
    f=cdms2.open(vcs.sample_data + '/clt.nc')
Expecting nothing
ok
Trying:
    v=f('v') # read variable v from clt.nc
Expecting nothing
ok
Trying:
    xax=v.getAxis(3) # X axis
Expecting nothing
ok
Trying:
    yax=v.getAxis(2) # Y axis
Expecting nothing
ok
Trying:
    box=vcs.getboxfill()
Expecting nothing
ok
Trying:
    vcs.getworldcoordinates(box, xax, yax)
Expecting:
    [-180.0, 180.0, -88.288399, 88.288399]
ok
Trying:
    vcs.listelements() # list all vcs object types
Expecting:
    ['1d', '3d_dual_scalar', '3d_scalar', '3d_vector', 'boxfill', ...]
ok
Trying:
    vcs.listelements('1d')
Expecting:
    [...]
ok
Trying:
    vcs.listelements('boxfill')
Expecting:
    [...]
ok
Trying:
    a=vcs.init()
Expecting nothing
ok
Trying:
    print vcs.match_color('salmon', 'magma')
Expecting:
    192
ok
Trying:
    print vcs.match_color('red', 'rainbow')
Expecting:
    242
ok
Trying:
    print vcs.match_color([0,0,100],'default') # closest color from blue
Expecting:
    52
ok
Trying:
    s=range(7)
Expecting nothing
ok
Trying:
    vcs.minmax(s)
Expecting:
    (0.0, 6.0)
ok
Trying:
    vcs.minmax([s,s])
Expecting:
    (0.0, 6.0)
ok
Trying:
    vcs.minmax([[s,s*2],4.,[6.,7.,s]],[5.,-7.,8,(6.,1.)])
Expecting:
    (-7.0, 8.0)
ok
Trying:
    vcs.mkevenlevels(0,100)
Expecting:
    [0.0, 10.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 100.0]
ok
Trying:
    vcs.mkevenlevels(0,100,nlev=5)
Expecting:
    [0.0, 20.0, 40.0, 60.0, 80.0, 100.0]
ok
Trying:
    vcs.mkevenlevels(100,0,nlev=5)
Expecting:
    [100.0, 80.0, 60.0, 40.0, 20.0, 0.0]
ok
Trying:
    scale=vcs.mkscale(2,20,zero=2)
Expecting nothing
ok
Trying:
    labels=vcs.mklabels(scale)
Expecting nothing
ok
Trying:
    keys=labels.keys()
Expecting nothing
ok
Trying:
    keys.sort()
Expecting nothing
ok
Trying:
    for key in keys:
        print key, ':', labels[key]
Expecting:
    0.0 : 0
    2.0 : 2
    4.0 : 4
    6.0 : 6
    8.0 : 8
    10.0 : 10
    12.0 : 12
    14.0 : 14
    16.0 : 16
    18.0 : 18
    20.0 : 20
ok
Trying:
    labels=vcs.mklabels([.00002,.00003,.00005])
Expecting nothing
ok
Trying:
    keys=labels.keys()
Expecting nothing
ok
Trying:
    keys.sort()
Expecting nothing
ok
Trying:
    for key in keys:
        print key, ':', labels[key]
Expecting:
    2e-05 : 2E-5
    3e-05 : 3E-5
    5e-05 : 5E-5
ok
Trying:
    vcs.mklabels ([.00002,.00005],output='list')
Expecting:
    ['2E-5', '5E-5']
ok
Trying:
    vcs.mkscale(0,100)
Expecting:
    [0.0, 10.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 100.0]
ok
Trying:
    vcs.mkscale(0,100,nc=5)
Expecting:
    [0.0, 20.0, 40.0, 60.0, 80.0, 100.0]
ok
Trying:
    vcs.mkscale(-10,100,nc=5)
Expecting:
    [-25.0, 0.0, 25.0, 50.0, 75.0, 100.0]
ok
Trying:
    vcs.mkscale(-10,100,nc=5,zero=-1)
Expecting:
    [-20.0, 20.0, 60.0, 100.0]
ok
Trying:
    vcs.mkscale(2,20)
Expecting:
    [2.0, 4.0, 6.0, 8.0, 10.0, 12.0, 14.0, 16.0, 18.0, 20.0]
ok
Trying:
    vcs.mkscale(2,20,zero=2)
Expecting:
    [0.0, 2.0, 4.0, 6.0, 8.0, 10.0, 12.0, 14.0, 16.0, 18.0, 20.0]
ok
Trying:
    import numpy, cdms2, os
Expecting nothing
ok
Trying:
    from random import randint
Expecting nothing
ok
Trying:
    array=numpy.array([range(10) for _ in range(10)])
Expecting nothing
ok
Trying:
    mask=[] # we will use this to create a random mask
Expecting nothing
ok
Trying:
    for _ in range(10):
        mask.append([randint(0,1) for _ in range(10)])
Expecting nothing
ok
Trying:
    ma=numpy.ma.MaskedArray(array, mask)
Expecting nothing
ok
Trying:
    if not os.path.exists(vcs.sample_data):
        vcs.download_sample_data_files() # get some data for cdms2
Expecting nothing
ok
Trying:
    f=cdms2.open(vcs.sample_data + '/clt.nc')
Expecting nothing
ok
Trying:
    v=f('v') # get variable 'v' from clt.nc
Expecting nothing
ok
Trying:
    vcs.monotonic(array) # monotonicity of 2D numpy array
Expecting:
    True
ok
Trying:
    vcs.monotonic(ma) # monotonicity of simple masked array
Expecting:
    True
ok
Trying:
    vcs.monotonic(v) # monotonicity of cdms2 variable
Expecting:
    False
ok
Trying:
    cp = vcs.getcolormap() # Get a copy of the default colormap
Expecting nothing
ok
Trying:
    vcs.rgba_color('black', cp) # Find the rgba equivalent for black
Expecting:
    [0.0, 0.0, 0.0, 100]
ok
Trying:
    vcs.setcolorcell("AMIP",11,0,0,0)
Expecting nothing
ok
Trying:
    vcs.setcolorcell("AMIP",21,100,0,0)
Expecting nothing
ok
Trying:
    vcs.setcolorcell("AMIP",31,0,100,0)
Expecting nothing
ok
Trying:
    vcs.setcolorcell("AMIP",41,0,0,100)
Expecting nothing
ok
Trying:
    vcs.setcolorcell("AMIP",51,100,100,100)
Expecting nothing
ok
Trying:
    vcs.setcolorcell("AMIP",61,70,70,70)
Expecting nothing
ok
Trying:
    vcs.show() # show all vcs object types
Expecting:
    ['1d', '3d_dual_scalar', '3d_scalar', '3d_vector', 'boxfill', ...]
ok
Trying:
    vcs.show('boxfill') # List boxfill objects 
Expecting:
    *******************Boxfill Names List**********************
    ...
    *******************End Boxfill Names List**********************
ok
Trying:
    vcs.show('3d_vector') # List 3d_vector objects 
Expecting:
    *******************3d_vector Names List**********************
    ...
    *******************End 3d_vector Names List**********************
ok
Trying:
    vcs.show('3d_scalar') # List 3d_scalar objects 
Expecting:
    *******************3d_scalar Names List**********************
    ...
    *******************End 3d_scalar Names List**********************
ok
Trying:
    vcs.show('3d_dual_scalar') # List 3d_dual_scalar objects 
Expecting:
    *******************3d_dual_scalar Names List**********************
    ...
    *******************End 3d_dual_scalar Names List**********************
ok
Trying:
    vcs.show('1d') # List 1d objects
Expecting:
    *******************1d Names List**********************
    ...
    *******************End 1d Names List**********************
ok
20 items had no tests:
    vcs.utils
    vcs.utils.Logo.__init__
    vcs.utils.VCSUtilsError
    vcs.utils.VCSUtilsError.__init__
    vcs.utils.VCSUtilsError.__str__
    vcs.utils.__split2contiguous
    vcs.utils._scriptrun
    vcs.utils.getDataWcValue
    vcs.utils.getdotdirectory
    vcs.utils.loadTemplate
    vcs.utils.loadVCSItem
    vcs.utils.png_read_metadata
    vcs.utils.prettifyAxisLabels
    vcs.utils.process_range_from_old_scr
    vcs.utils.process_src_element
    vcs.utils.return_display_names
    vcs.utils.saveinitialfile
    vcs.utils.scriptrun
    vcs.utils.scriptrun_scr
    vcs.utils.setTicksandLabels
26 items passed all tests:
  13 tests in vcs.utils.Logo
  11 tests in vcs.utils.Logo.plot
   4 tests in vcs.utils.creategraphicsmethod
   2 tests in vcs.utils.download_sample_data_files
   5 tests in vcs.utils.drawLinesAndMarkersLegend
   5 tests in vcs.utils.dumpToDict
   3 tests in vcs.utils.dumpToJson
   4 tests in vcs.utils.generate_time_labels
   6 tests in vcs.utils.get_png_dims
   4 tests in vcs.utils.getcolorcell
   4 tests in vcs.utils.getcolormap
   7 tests in vcs.utils.getcolors
   2 tests in vcs.utils.getfontname
   2 tests in vcs.utils.getfontnumber
   2 tests in vcs.utils.getgraphicsmethod
   8 tests in vcs.utils.getworldcoordinates
   3 tests in vcs.utils.listelements
   4 tests in vcs.utils.match_color
   4 tests in vcs.utils.minmax
   3 tests in vcs.utils.mkevenlevels
  10 tests in vcs.utils.mklabels
   6 tests in vcs.utils.mkscale
  12 tests in vcs.utils.monotonic
   2 tests in vcs.utils.rgba_color
   6 tests in vcs.utils.setcolorcell
   6 tests in vcs.utils.show
138 tests in 46 items.
138 passed and 0 failed.
Test passed.
